{"version":3,"sources":["logo.svg","ListItem.js","Warning.js","List.js","App.js","InMemoryApp.js","reportWebVitals.js","index.js"],"names":["ListItem","props","editable","id","type","checked","value","item","onChange","e","onItemChanged","target","className","readOnly","onClick","Warning","onClose","onItemsDeleted","data","filter","map","List","useState","hideCompletedItems","setHideCompletedItems","setEditable","showWarning","setShowWarning","addable","setAddable","listItems","a","incompleteListItems","document","getElementById","onItemAdded","length","transitionName","transitionEnter","transitionLeave","App","InMemoryApp","initialData","setData","newItem","generateUniqueID","concat","ids","includes","field","newVal","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode"],"mappings":"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","file":"static/js/main.3488b647.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/logo.6ce24c58.svg\";","import React from 'react';\nimport './ListItem.css';\n\nfunction ListItem(props) {\n    return (\n        <div key={props.id}>\n            {props.editable ?\n                <div id=\"editableItems\">\n                    <input type={'checkbox'}\n                           id={props.id}\n                           checked={props.checked}\n                    />\n                    <textarea\n                           id={props.id}\n                    value={props.item}\n                    onChange={(e) => props.onItemChanged(props.id, \"item\", e.target.value) }\n                    />\n                </div>\n                :\n                <div id=\"nonEditableItems\">\n                    <input type={'checkbox'}\n                       id={props.id}\n                       checked={props.checked}\n                       onChange={() => props.onItemChanged(props.id,\"checked\", !props.checked)}\n                    />\n                    <textarea\n                           className={\"nonEditableItem\"}\n                           id={props.id}\n                           value={props.item}\n                           readOnly\n                           onClick={() => props.onItemChanged(props.id,\"checked\", !props.checked)}\n                    />\n                </div>\n\n            }\n        </div>\n    );\n}\nexport default ListItem;","import React from 'react';\nimport \"./Warning.css\"\n\nfunction Warning(props){\n    return (\n        <div className=\"backdrop\">\n            <div id=\"warning\">\n                <p>Are you sure you want to delete all completed items? This action is irreversible.</p>\n                <button id=\"cancel\" onClick={props.onClose}>\n                    Cancel\n                </button>\n                <button id=\"confirm\" onClick={(e)=>\n                {props.onItemsDeleted(props.data.filter((item) => item.checked).map((item) => item.id));\n                    props.onClose();}\n                    }>\n                    Confirm\n                </button>\n\n\n            </div>\n        </div>\n    );\n}\nexport default Warning;","import React from 'react';\nimport ListItem from './ListItem.js';\nimport Warning from './Warning.js';\nimport {useState} from \"react\";\nimport './List.css';\nimport { CSSTransitionGroup } from 'react-transition-group'\n\nfunction List(props) {\n    const [hideCompletedItems, setHideCompletedItems] = useState(false);\n    const [editable, setEditable] = useState(false);\n    const [showWarning, setShowWarning] = useState(false);\n    const [addable, setAddable] = useState(false);\n\n    const listItems = props.data.map(a => <ListItem id={a.id}\n                                                    item={a.item}\n                                                    checked={a.checked}\n                                                    editable={editable}\n                                                    onItemChanged={props.onItemChanged}\n                                                    key={a.id}\n                                                    {...a}/>);\n    const incompleteListItems = listItems.filter((item) => !item.props.checked);\n\n    return (\n        <div id=\"list\">\n            <h1>To-Do List</h1>\n\n            <div id=\"inputBox_Button\">\n                <button id=\"addItem\"\n                        className={addable ? \"enabled\" : \"disabled\"}\n                        onClick={(e)=> {\n                            if(document.getElementById(\"inputText\").value !== \"\") {\n                            props.onItemAdded(document.getElementById(\"inputText\").value);\n                                document.getElementById(\"inputText\").value = \"\";\n                                setAddable(false);}}}>\n                    +\n                </button>\n                <input id = \"inputText\" type={'text'} onChange={(e) => {\n                    if (e.target.value !== \"\") {\n                        setAddable(true);\n                    }\n                    else {\n                        setAddable(false);\n                    }\n                }}/>\n            </div>\n\n\n            {listItems.length !== 0 && <div id =\"editButton\">\n                <button onClick={() => setEditable(!editable)}> {editable ? \"Save Changes\" : \"Edit Items\"} </button>\n            </div>}\n\n            <div id=\"listItems\" >\n                <CSSTransitionGroup\n                    transitionName=\"fade\"\n                    transitionEnter={300}\n                    transitionLeave={300}>\n                {hideCompletedItems ? incompleteListItems :listItems}\n                </CSSTransitionGroup>\n            </div>\n\n\n            {showWarning && <Warning data={props.data}\n                                     onItemsDeleted={props.onItemsDeleted}\n                                     onClose={() =>setShowWarning(false)}\n            />}\n            {(incompleteListItems.length !== listItems.length) &&\n\n                <div className=\"completedButtons\">\n\n                    {!hideCompletedItems ?\n                        <button id=\"hideCompleted\" onClick={() => setHideCompletedItems(!hideCompletedItems)}>\n                        Hide Completed Items\n                        </button> :\n                        <button id=\"showCompleted\" onClick={() => setHideCompletedItems(!hideCompletedItems)}>\n                        Show Completed Items\n                        </button>\n                    }\n                    <button id=\"deleteCompleted\"\n                    onClick={() => setShowWarning(true)}>\n                    Delete Completed Items\n                    </button>\n                </div>\n\n            }\n\n        </div>\n\n\n    );\n\n}\nexport default List;","import logo from './logo.svg';\nimport './App.css';\nimport List from \"./List.js\";\n\nfunction App(props) {\n  return (\n    <List data={props.data}\n          onItemAdded={props.onItemAdded}\n          onItemsDeleted={props.onItemsDeleted}\n          onItemChanged={props.onItemChanged}\n    />\n  );\n}\n\nexport default App;\n","import React, {useState} from 'react';\nimport App from './App.js';\nimport {generateUniqueID} from \"web-vitals/dist/modules/lib/generateUniqueID\";\n\nfunction InMemoryApp(props) {\n    const [data, setData] = useState(props.initialData);\n\n    function onItemAdded(item) {\n        let newItem = [{id: generateUniqueID(), item:item, checked:false}];\n        setData(data.concat(newItem));\n    }\n\n    function onItemsDeleted(ids) {\n        setData(data.filter((item) => !ids.includes(item.id)));\n    }\n\n    // function onToggleItemChecked(id) {\n    //     function helper(a) {\n    //         if (a.id === id) {\n    //             a.checked = !a.checked;\n    //         }\n    //         return a;\n    //     }\n    //     setData(data.map(a => helper(a)));\n    // }\n\n    function onItemChanged(id, field, newVal){\n        function helper(a) {\n            if (a.id === id){\n                a[field] = newVal;\n            }\n            return a;\n        }\n        setData(data.map(helper));\n    }\n\n    return <App data={data}\n                onItemAdded={onItemAdded}\n                onItemsDeleted={onItemsDeleted}\n                onItemChanged={onItemChanged}\n    />\n}\n\nexport default InMemoryApp;","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport InMemoryApp from './InMemoryApp.js';\nimport reportWebVitals from './reportWebVitals';\n\nconst initialData = [\n    {\n        id: 0,\n        item: \"Buy new John Grisham Book\",\n        checked: false\n    },\n    {\n        id: 1,\n        item: \"Buy newer John Grisham Book\",\n        checked: true\n    }\n];\n\n\nReactDOM.render(\n  <React.StrictMode>\n      <InMemoryApp initialData={initialData}/>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}