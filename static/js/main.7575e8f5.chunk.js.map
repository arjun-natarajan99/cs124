{"version":3,"sources":["SelectionMaintainingInput.js","ListItem.js","Warning.js","List.js","Lists.js","App.js","reportWebVitals.js","index.js"],"names":["SelectionMaintainingInput","props","value","onChange","useState","cursor","setCursor","ref","useRef","useEffect","input","current","setSelectionRange","document","activeElement","id","scrollIntoView","behavior","block","className","readOnly","e","target","selectionStart","onClick","ListItem","item","editable","type","checked","disabled","onItemChanged","JSON","parse","priority","onItemsDeleted","Warning","tabIndex","onClose","data","filter","map","List","hideCompletedItems","setHideCompletedItems","setEditable","showWarning","setShowWarning","newItemText","setNewItemText","key","newItemPriority","setNewItemPriority","listNameEditable","setListNameEditable","listItems","a","created","incompleteListItems","sortLabels","name","desc","asc","dropDownOptions","field","direction","sortField","sortDirection","push","setSelectedListID","setSelectedListName","selectedListName","onListNameChanged","selectedListID","onKeyPress","tabindex","onItemAdded","placeholder","length","onSortItems","transitionName","transitionEnter","transitionLeave","htmlFor","collectionName","Lists","newListText","setNewListText","query","db","collection","orderBy","sortListField","sortListDirection","useCollection","loading","useLoading","indicator","width","containerProps","indicatorEl","docs","lists","role","onListDeleted","onListAdded","onSortLists","firebase","initializeApp","apiKey","authDomain","projectId","storageBucket","messagingSenderId","appId","measurementId","firestore","App","sortItemsField","setSortItemsField","sortItemsDirection","setSortItemsDirection","setSortListField","setSortListDirection","doc","newId","generateUniqueID","newItem","FieldValue","serverTimestamp","set","ids","delete","newVal","update","sort","split","newSortField","newSortDirection","listId","newName","listName","newList","setSortListDiretion","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","initialData","getElementById"],"mappings":"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","file":"static/js/main.7575e8f5.chunk.js","sourcesContent":["import { useEffect, useRef, useState } from 'react';\n\nfunction SelectionMaintainingInput(props) {\n    const { value, onChange, ...rest } = props;\n    const [cursor, setCursor] = useState(null);\n    const ref = useRef(null);\n\n    useEffect(() => {\n        const input = ref.current;\n        if (input) input.setSelectionRange(cursor, cursor);\n        if (document.activeElement.id == props.id && input) {\n            input.scrollIntoView({ behavior: 'smooth', block: \"nearest\"});\n        }\n    }, [ref, cursor, value]);\n\n    const handleChange = (e) => {\n        setCursor(e.target.selectionStart);\n        onChange && onChange(e);\n    };\n\n    return <textarea\n        id={props.id}\n        ref={ref}\n        className={props.className}\n        value={value}\n        readOnly={props.readOnly}\n        onChange={handleChange}\n        onClick={props.onClick}\n        aria-label={`List Item ${value}`}\n    />\n}\n\nexport default SelectionMaintainingInput;","import React from 'react';\nimport './ListItem.css';\nimport {useRef, useEffect} from \"react\";\nimport SelectionMaintainingInput from \"./SelectionMaintainingInput\";\n\nfunction ListItem(props) {\n    let item = <div id={props.editable ? \"editableItems\" : \"nonEditableItems\"}>\n        <input type={'checkbox'}\n               id={props.id}\n               checked={props.checked}\n               disabled={props.editable}\n               onChange={(e) =>\n                {if (!props.editable) {props.onItemChanged(props.id,\"checked\", !props.checked); } }}\n               aria-label={props.checked ? `Unmark ${props.item} as completed.`: `Mark ${props.item} as completed.`}\n        />\n\n        <SelectionMaintainingInput id={props.id}\n                                   className={`${props.editable ? \"editableItem\" : \"nonEditableItem\"} ${props.checked ? \"checked\" : \"unchecked\"}`}\n                                   value={props.item}\n                                   readOnly={!props.editable}\n                                   onChange={(e) => {if (props.editable) {props.onItemChanged(props.id,\n                                       \"item\", e.target.value); }}}\n                                   onClick={() => {if (!props.editable){props.onItemChanged(props.id,\"checked\", !props.checked);}}}/>\n\n        {props.editable ? <select id=\"priorityDropDownEditable\"\n                                  onChange={(e) => props.onItemChanged(props.id,\n                                      \"priority\",\n                                      JSON.parse(e.target.value))\n                                  }\n                                  aria-label={`Edit ${props.item} priority.`}>\n                <option value=\"\">{props.priority.value}</option>\n                {props.priority.value !== \"High\" && <option value=' {\"key\": \"c\", \"value\": \"High\"}'>High</option>}\n                {props.priority.value !== \"Medium\" && <option value=' {\"key\": \"b\", \"value\": \"Medium\"}'>Medium</option>}\n                {props.priority.value !== \"Low\" && <option value=' {\"key\": \"a\", \"value\": \"Low\"}'>Low</option>}\n            </select>\n            :\n            <><p className={`${props.checked ? \"checked\" : \"unchecked\"}`}\n               id=\"priority\">\n                {props.priority.value}</p>\n                <button id=\"deleteItem\"\n                        onClick={() => props.onItemsDeleted([props.id])}\n                        aria-label={`Delete ${props.item}`}> x</button></>\n        }\n\n    </div>\n    return (\n        <div key={props.id}\n            id=\"listItem\">\n            {item}\n        </div>\n    );\n}\nexport default ListItem;","import React from 'react';\nimport \"./Warning.css\"\n\nfunction Warning(props){\n    return (\n        <div className=\"backdrop\">\n            <div id=\"warning\">\n                <p>Are you sure you want to delete all completed items? This action is irreversible.</p>\n                <button tabIndex={1} id=\"cancel\" onClick={props.onClose}\n                        aria-label={\"Do not delete items.\"}\n                >\n                    Cancel\n                </button>\n                <button tabIndex={2}\n                        id=\"confirm\"\n                        onClick={(e)=>\n                        {props.onItemsDeleted(props.data.filter((item) => item.checked).map((item) => item.id));\n                        props.onClose();}}\n                        aria-label={\"Delete all items. This action is irreversible.\"}\n                >\n                    Confirm\n                </button>\n            </div>\n        </div>\n    );\n}\nexport default Warning;","import React, {useRef} from 'react';\nimport ListItem from './ListItem.js';\nimport Warning from './Warning.js';\nimport {useState, useEffect} from \"react\";\nimport './List.css';\nimport { CSSTransitionGroup } from 'react-transition-group';\nimport Toggle from \"react-toggle\";\n\n\nfunction List(props) {\n    const [hideCompletedItems, setHideCompletedItems] = useState(false);\n    const [editable, setEditable] = useState(false);\n    const [showWarning, setShowWarning] = useState(false);\n    const [newItemText, setNewItemText] = useState(\"\");\n    const [newItemPriority, setNewItemPriority] = useState({key: 0, value: \"---\"});\n    const [listNameEditable, setListNameEditable] = useState(false);\n\n    let listItems = props.data.map(a => <ListItem id={a.id}\n                                                  item={a.item}\n                                                  checked={a.checked}\n                                                  editable={editable}\n                                                  onItemChanged={props.onItemChanged}\n                                                  key={a.id}\n                                                  created={a.created}\n                                                  priority={a.priority}\n                                                  onItemsDeleted={props.onItemsDeleted}\n                                                    {...a}/>);\n    const incompleteListItems = listItems.filter((item) => !item.props.checked);\n\n\n\n\n    const sortLabels = {\n        created: {name: \"Creation Date\", desc: \"New → Old\", asc: \"Old → New\"},\n        item: {name: \"Name\", desc: \"Z → A\", asc: \"A → Z\"},\n        priority: {name: \"Priority\", desc: \"High → Low\", asc: \"Low → High\"},\n    };\n    let dropDownOptions = [];\n    for(let field in sortLabels){\n        if (field !== \"order\") {\n            for (let direction of [\"desc\", \"asc\"]) {\n                if (props.sortField !== field || props.sortDirection !== direction) {\n                    dropDownOptions.push(\n                        <option value={`${field} ${direction}`}>Sort\n                            by {sortLabels[field].name}: {sortLabels[field][direction]}</option>);\n                }\n            }\n        }\n    }\n    return (\n        <div id=\"list\">\n            <button id=\"backButton\"\n                    onClick={() => {props.setSelectedListID(\" \"); props.setSelectedListName(\" \");}}\n                    aria-label=\"Back button to see all lists\"\n            >\n                ← </button>\n            {listNameEditable ?\n                <div className=\"listName\">\n                    <input value={props.selectedListName}\n                           onChange={(e) => props.onListNameChanged(props.selectedListID, e.target.value)}\n                           onKeyPress={(e) => {\n                               if (e.key === \"Enter\"){\n                                   setListNameEditable(false);\n                               }\n                           }}\n                           aria-label=\"Edit List Name\"\n                    >\n                    </input>\n                    <button onClick={() => setListNameEditable(false)}\n                            aria-label=\"Save List Name\">✅</button>\n                </div>\n                :\n                <div className=\"listName\">\n                    <h1 aria-label=\"List Name\">{props.selectedListName} </h1>\n                    <button onClick={() => setListNameEditable(true)}\n                            aria-label=\"Click to Edit List Name\">✏️</button>\n                </div>\n            }\n            <div id=\"inputBox_Button\">\n                <button id=\"addItem\"\n                        tabindex=\"-1\"\n                        className={newItemText ? \"enabled\" : \"disabled\"}\n                        onClick={(e)=> {\n                            if (newItemText !== \"\") {\n                                props.onItemAdded(newItemText, newItemPriority);\n                                setNewItemText(\"\");\n                            }\n                        }}>\n                    +\n                </button>\n                <input id = \"inputText\"\n                       type={'text'}\n                       placeholder={\"Enter text here...\"}\n                       onChange={(e) => setNewItemText(e.target.value)}\n                       onKeyPress={(e) => {\n                           if (e.key === \"Enter\") {\n                               if (newItemText !== \"\") {\n                                   props.onItemAdded(newItemText, newItemPriority);\n                                   setNewItemText(\"\");\n                               }\n                           }}}\n                       value={newItemText}\n                       disabled={editable}\n                       aria-label=\"Enter new list item\"\n                />\n            </div>\n                <select id=\"selectPriority\"\n                        onChange={(e) => setNewItemPriority(JSON.parse(e.target.value))}\n                        disabled={editable}\n                        onKeyPress={(e) => {\n                            if (e.key === \"Enter\") {\n                                if (newItemText !== \"\") {\n                                    props.onItemAdded(newItemText, newItemPriority);\n                                    setNewItemText(\"\");\n                                }\n                            }}}\n                        aria-label=\"Select new list item priority\"\n                        >\n                    <option value='{\"key\": \"0\", \"value\": \"--\"}'>--Set Priority--</option>\n                    <option value='{\"key\": \"c\", \"value\": \"High\"}'>High</option>\n                    <option value='{\"key\": \"b\", \"value\": \"Medium\"}'>Medium</option>\n                    <option value='{\"key\": \"a\", \"value\": \"Low\"}'>Low</option>\n                </select>\n\n\n            {listItems.length !== 0 &&\n            <div id=\"sortItems\">\n                <select id=\"sortDropDown\"\n                        onChange={(e) => props.onSortItems(e.target.value)}\n                        disabled={editable}>\n                    <option value=\"\">Sort by {sortLabels[props.sortField].name}: {sortLabels[props.sortField][props.sortDirection]}</option>\n                    {dropDownOptions}\n                </select>\n            </div>\n            }\n\n            {(listItems.length !== 0 || editable) && <div id =\"editButton\">\n                <button onClick={() => setEditable(!editable)}\n                        aria-label={editable ? \"Finished Editing\" : \"Edit List Items\"}> {editable ? \"Done\" : \"Edit Items\"} </button>\n            </div>}\n\n\n            <div id=\"listItems\" >\n                {listItems.length!== 0 &&\n                    <div id=\"labels\">\n                        <h2>Item</h2>\n                        <h2>Priority</h2>\n                    </div>\n                }\n                <CSSTransitionGroup\n                    transitionName=\"fade\"\n                    transitionEnter={10}\n                    transitionLeave={10}>\n                {hideCompletedItems ? incompleteListItems :listItems}\n                </CSSTransitionGroup>\n            </div>\n\n\n            {showWarning && <Warning data={props.data}\n                                     onItemsDeleted={props.onItemsDeleted}\n                                     onClose={() =>setShowWarning(false)}\n            />}\n            {(incompleteListItems.length !== listItems.length) &&\n\n                // <div className=\"completedButtons\">\n                    <div id=\"hideCompletedItems\">\n                        <label className=\"toggleLabel\" htmlFor=\"showCompletedItems\">Hide Completed Items</label>\n                        <Toggle id=\"showCompletedItems\"\n                                onChange={() => setHideCompletedItems(!hideCompletedItems)}/>\n                    </div>\n            }\n            {(incompleteListItems.length !== listItems.length) &&\n            !editable && !hideCompletedItems &&\n            <button id=\"deleteCompleted\"\n                    onClick={() => setShowWarning(true)}>\n                Delete Completed Items\n            </button>\n            }\n                {/* </div>*/}\n\n            {/*}*/}\n\n        </div>\n\n\n    );\n\n}\nexport default List;","import './Lists.css';\nimport {useCollection} from \"react-firebase-hooks/firestore\";\nimport React, {useState} from \"react\";\nimport { CSSTransitionGroup } from 'react-transition-group';\nimport {useLoading, Oval} from \"@agney/react-loading\";\n\nconst collectionName = \"lists\";\n\nfunction Lists(props){\n    const [newListText, setNewListText] = useState(\"\");\n    const query = props.db.collection(collectionName).orderBy(props.sortListField, props.sortListDirection);\n    const collection = props.db.collection(collectionName);\n    const [value, loading, error] = useCollection(query);\n\n    const { containerProps, indicatorEl } = useLoading({\n        loading: true,\n        //Width selector does not work as intended when placed in css Stylesheet\n        indicator: <Oval width=\"30\"/>\n    });\n\n    if (loading){\n        return <div className=\"loading\">\n            <h1> Hang tight...</h1>\n            <section {...containerProps}>\n                {indicatorEl} {/* renders only while loading */}\n            </section>\n        </div>\n    }\n\n    let data = null;\n\n    if (value) {\n        data = value.docs.map(a => a.data());\n    }\n    const sortLabels = {\n        created: {name: \"Creation Date\", asc: \"Old → New\", desc: \"New → Old\"},\n        name: {name: \"Name\", desc: \"Z → A\", asc: \"A → Z\"}\n    };\n    let dropDownOptions = [];\n    for(let field in sortLabels){\n        if (field !== \"order\") {\n            for (let direction of [\"desc\", \"asc\"]) {\n                if (props.sortListField !== field || props.sortListDirection !== direction) {\n                    dropDownOptions.push(\n                        <option value={`${field} ${direction}`}>Sort\n                            by {sortLabels[field].name}: {sortLabels[field][direction]}</option>);\n                }\n            }\n        }\n    }\n    const lists = data.map(a =>\n        <div id=\"li\">\n            <p id=\"listName\"\n               tabIndex={0}\n               onClick={() =>\n               {\n                props.setSelectedListID(a.id);\n                props.setSelectedListName(a.name);\n               }}\n               onKeyPress={(e) => {\n                   if(e.key === \"Enter\" || e.key === \" \") {\n                       props.setSelectedListID(a.id);\n                       props.setSelectedListName(a.name);\n                   }\n                }}\n               role=\"button\"\n               aria-label={`Select List with Name ${a.name}`}\n            >{a.name}</p>\n            <button id=\"deleteList\" onClick={() => props.onListDeleted(a.id)}\n                    aria-label={`Delete List with Name ${a.name}`}>x</button>\n        </div>\n    );\n    return (<div id=\"lists\">\n            <h1>To-Do Lists</h1>\n            <div id=\"newListComponents\">\n                <button id=\"addList\"\n                        tabIndex=\"-1\"\n                        className={newListText ? \"enabled\" : \"disabled\"}\n                        onClick={(e)=> {\n                            if (newListText !== \"\") {\n                                props.onListAdded(newListText);\n                                setNewListText(\"\");\n                            }\n                        }}\n                >\n                    +\n                </button>\n                <input id = \"inputList\"\n                       type={'text'}\n                       placeholder={\"Create New List...\"}\n                       aria-label={`Create new List with name ${newListText}`}\n                       onChange={(e) => setNewListText(e.target.value)}\n                       onKeyPress={(e) => {\n                           if (e.key === \"Enter\") {\n                               if (newListText !== \"\") {\n                                   props.onListAdded(newListText);\n                                   setNewListText(\"\");\n                               }\n                           }}}\n                       value={newListText}\n                      />\n            </div>\n            {lists.length !== 0 &&\n                <div id=\"sortList\">\n                    <select id=\"sortDropDown\"\n                            onChange={(e) => props.onSortLists(e.target.value)}\n                    >\n                        <option value=\"\">Sort by {sortLabels[props.sortListField].name}:\n                            {sortLabels[props.sortListField][props.sortListDirection]}</option>\n                        {dropDownOptions}\n                    </select>\n                </div>\n            }\n\n            <div id=\"listsDiv\">\n                <h2 id=\"yourLists\">Your Lists</h2>\n                    <CSSTransitionGroup\n                        transitionName=\"fade\"\n                        transitionEnter={300}\n                        transitionLeave={300}>\n                        {lists}\n                    </CSSTransitionGroup>\n            </div>\n\n\n        </div>\n    );\n}\nexport default Lists;","import React, {useState} from 'react';\nimport List from \"./List.js\";\nimport Lists from \"./Lists\";\nimport {generateUniqueID} from \"web-vitals/dist/modules/lib/generateUniqueID\";\nimport firebase from \"firebase/compat\";\nimport {useCollection} from \"react-firebase-hooks/firestore\";\nimport {CSSTransitionGroup} from \"react-transition-group\";\nimport {useLoading, Oval} from \"@agney/react-loading\";\n\nconst firebaseConfig = {\n    apiKey: \"AIzaSyB6K4Ycqr1bST4Zkkr_tTKRzEOQ5n9aY6o\",\n    authDomain: \"cs124-lab3-33ef0.firebaseapp.com\",\n    projectId: \"cs124-lab3-33ef0\",\n    storageBucket: \"cs124-lab3-33ef0.appspot.com\",\n    messagingSenderId: \"283056924726\",\n    appId: \"1:283056924726:web:12cc1133aa2ec5ffba1097\",\n    measurementId: \"G-E3QVKSNMGJ\"\n};\n\nfirebase.initializeApp(firebaseConfig);\nconst db = firebase.firestore();\nconst collectionName = \"to-do-list\";\n\n\n\nfunction App() {\n    const [selectedListID,setSelectedListID] = useState(\" \");\n    const [selectedListName, setSelectedListName] = useState(\" \");\n    const [sortItemsField, setSortItemsField] = useState(\"created\");\n    const [sortItemsDirection, setSortItemsDirection] = useState(\"desc\");\n    const [sortListField, setSortListField] = useState(\"created\");\n    const [sortListDirection, setSortListDirection] = useState(\"desc\");\n\n\n    const query = db.collection(\"lists\").doc(selectedListID)\n        .collection(collectionName).orderBy(sortItemsField, sortItemsDirection);\n\n    const collection = db.collection(\"lists\").doc(selectedListID).collection(collectionName);\n    const [value, loading, error] = useCollection(query);\n\n    function onListAdded(listName) {\n        const newId = generateUniqueID();\n        let newList = {id: newId,\n            name: listName,\n            created: firebase.firestore.FieldValue.serverTimestamp()\n        };\n        const docRef = db.collection(\"lists\").doc(newId);\n        docRef.set(newList);\n    }\n    function onListDeleted(listId) {\n        const docRef = db.collection(\"lists\").doc(listId);\n        docRef.delete();\n    }\n    function onListNameChanged(listId, newName) {\n        setSelectedListName(newName);\n        const docRef = db.collection(\"lists\").doc(listId);\n        docRef.update({name: newName});\n    }\n    function onItemAdded(item, priority) {\n        const newId = generateUniqueID();\n        let newItem = {id: newId,\n            item: item,\n            checked: false,\n            created: firebase.firestore.FieldValue.serverTimestamp(),\n            priority: priority\n        };\n        const docRef = collection.doc(newId);\n        docRef.set(newItem);\n    }\n\n    function onItemsDeleted(ids) {\n        for(let id of ids) {\n            const docRef = collection.doc(id);\n            docRef.delete();\n        }\n    }\n\n    function onSortLists(sort) {\n        const [newSortField, newSortDirection] = sort.split(' ');\n        setSortListField(newSortField);\n        setSortListDirection(newSortDirection);\n    }\n\n    function onSortItems(sort) {\n        const [newSortField, newSortDirection] = sort.split(' ');\n        setSortItemsField(newSortField);\n        setSortItemsDirection(newSortDirection);\n    }\n\n    function onItemChanged(id, field, newVal){\n        const docRef = collection.doc(id);\n        docRef.update({[field]:newVal});\n    }\n\n    const { containerProps, indicatorEl } = useLoading({\n        loading: true,\n        //Width selector does not work as intended when placed in css Stylesheet\n        indicator: <Oval width=\"30\"/>\n    });\n\n    if (loading){\n        return (<div className=\"loading\">\n                <h1> Hang tight...</h1>\n                <section {...containerProps}>\n                    {indicatorEl} {/* renders only while loading */}\n                </section>\n            </div>\n        )\n    }\n\n    let data = null;\n    if (value) {\n        data = value.docs.map(a => a.data());\n    }\n    // let list = <List data={data}\n    //                  onItemAdded={onItemAdded}\n    //                  onItemsDeleted={onItemsDeleted}\n    //                  onItemChanged={onItemChanged}\n    //                  onSortItems={onSortItems}\n    //                  sortDirection={sortDirection}\n    //                  sortField={sortField}\n    //\n    // />;\n    return (\n        <div id=\"app\">\n        {selectedListID !== \" \" ?\n            <CSSTransitionGroup\n                transitionName=\"fade\"\n            transitionEnter={300}\n            transitionLeave={300}>\n                <List data={data}\n                      onItemAdded={onItemAdded}\n                      onItemsDeleted={onItemsDeleted}\n                      onItemChanged={onItemChanged}\n                      onSortItems={onSortItems}\n                      onListNameChanged={onListNameChanged}\n                      sortDirection={sortItemsDirection}\n                      sortField={sortItemsField}\n                      selectedListID={selectedListID}\n                      setSelectedListID={setSelectedListID}\n                      selectedListName={selectedListName}\n                      setSelectedListName={setSelectedListName}\n                >\n                </List>\n            </CSSTransitionGroup>\n                :\n                <Lists db={db}\n                       setSelectedListID={setSelectedListID}\n                       setSelectedListName={setSelectedListName}\n                       collection={collection}\n                       data={data}\n                       onListAdded={onListAdded}\n                       onListDeleted={onListDeleted}\n                       sortListField={sortListField}\n                       sortListDirection={sortListDirection}\n                       setSortListField={setSortListField}\n                       setSortListDiretion={setSortListDirection}\n                       onSortLists={onSortLists}\n                >\n                </Lists>\n        }\n        </div>\n\n    )\n\n}\n\nexport default App;","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App.js';\nimport reportWebVitals from './reportWebVitals';\n\nconst initialData = [\n    {\n        id: 0,\n        item: \"Buy new John Grisham Book\",\n        checked: false\n    },\n    {\n        id: 1,\n        item: \"Buy newer John Grisham Book\",\n        checked: true\n    }\n];\n\n\nReactDOM.render(\n  <React.StrictMode>\n      <App initialData={initialData}/>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}